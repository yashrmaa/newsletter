name: Generate Daily AI Newsletter

on:
  # Run daily at 2 PM UTC (7 AM Pacific)
  schedule:
    - cron: '0 14 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on pushes to main (for testing)
  push:
    branches: [ main ]
    paths:
      - 'ai_blogs.md'
      - 'src/**'
      - 'config/**'
      - 'templates/**'
      - 'docs/_config.yml'
      - 'docs/_layouts/**'
      - 'docs/Gemfile'
      - '.github/workflows/**'

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: ⚡ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📋 Install dependencies
      run: npm ci

    - name: 🔧 Setup environment
      run: |
        echo "Environment configured for ${{ secrets.LLM_PROVIDER || 'free' }} provider"
        echo "Repository: ${{ github.repository }}"
        echo "Running in GitHub Pages mode (local file output)"

    - name: 🤖 Generate AI Newsletter
      env:
        LLM_PROVIDER: ${{ secrets.LLM_PROVIDER || 'free' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        MONTHLY_BUDGET_LIMIT: ${{ secrets.MONTHLY_BUDGET_LIMIT || '0.00' }}
        NODE_ENV: production
        # Don't set GitHub credentials to force local mode
      run: |
        echo "🚀 Starting newsletter generation..."
        npm run generate
        echo "✅ Newsletter generation completed"
        echo "📁 Files generated:"
        ls -la docs/
        echo "📄 Newsletter preview (README.md):"
        head -20 docs/README.md
        echo ""
        echo "📚 Archive index preview (index.md):"
        head -10 docs/index.md

    - name: 💎 Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false

    - name: 🏗️ Build Jekyll site
      run: |
        cd docs
        echo "📁 Current directory contents:"
        ls -la
        echo ""
        echo "📄 Checking Jekyll config:"
        cat _config.yml | head -20
        echo ""
        echo "💎 Installing bundler..."
        gem install bundler
        bundle config set --local path 'vendor/bundle'
        echo ""
        echo "📦 Installing Jekyll dependencies..."
        bundle install
        echo ""
        echo "🔨 Building Jekyll site..."
        bundle exec jekyll build --baseurl /newsletter --trace
        echo ""
        echo "📁 Built site contents:"
        ls -la _site/
        echo ""
        echo "📄 Checking if README.html was generated:"
        ls -la _site/README.html || echo "❌ README.html not found!"
        echo ""
        echo "📄 Checking if index.html was generated:"
        ls -la _site/index.html || echo "❌ index.html not found!"
      env:
        JEKYLL_ENV: production

    - name: 📤 Setup Pages
      uses: actions/configure-pages@v4

    - name: 📁 Verify built site
      run: |
        echo "🔍 Verifying _site directory before upload:"
        pwd
        ls -la
        echo "📂 Built site contents:"
        ls -la docs/_site/ || (echo "❌ ERROR: _site directory not found!" && exit 1)
        echo "📏 File sizes:"
        du -h docs/_site/* || echo "Warning: Could not get file sizes"
        echo ""
        echo "🔍 Checking critical files:"
        test -f docs/_site/README.html && echo "✅ README.html exists" || echo "❌ README.html missing"
        test -f docs/_site/index.html && echo "✅ index.html exists" || echo "❌ index.html missing"
        test -f docs/_site/2025-08-31.html && echo "✅ 2025-08-31.html exists" || echo "ℹ️ 2025-08-31.html not found (may be expected)"
    
    - name: 📁 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs/_site'

    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 📝 Log deployment
      run: |
        echo "🎉 Newsletter successfully deployed!"
        echo "📄 URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📊 Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

  # Health check job (simplified)
  health-check:
    needs: [generate-newsletter] 
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Health Check Summary
      run: |
        echo "🔍 Newsletter Generation Health Check"
        echo "====================================="
        echo "📰 Generation: ${{ needs.generate-newsletter.result }}"
        echo "⏰ Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        
        if [[ "${{ needs.generate-newsletter.result }}" == "success" ]]; then
          echo "✅ Newsletter generation and deployment successful"
          echo "🌐 Your newsletter is live at the GitHub Pages URL"
        else
          echo "❌ Newsletter generation failed"
          echo "🔧 Check the workflow logs for details"
          exit 1
        fi